// Esse script modela a biomassa AGB usando o GEDI L4B.
// O GEDI L4B estima a média da densidade de biomassa (AGBD) em pixels de 1 km x 1 km  
// Mais informação sobre o GEDI L4B em: https://daac.ornl.gov/GEDI/guides/GEDI_L4B_Gridded_Biomass.html
// Sentinel-1, Sentinel-2 (e respectivos índices), SRTM e declividade (slope) são variáveis preditivas.
// Dado de Floresta/não floresta deriva do ESA Global Land Cover dataset (2020) que é uma máscara.

// Usa-se o Sentinel-1 para a época do ápice da cheia (em torno de 19m no ápice (ínicio de junho)
// em maio o rio ainda estava enchendo mas já em níveis altos (18.32 no inicio do mes).

//importe para o seu codigo um DEM da área (DEM_export), uma composição sentinel 2 (S2_composite) e as imagens do sentinel 1 VV e VH (PRS_VV_iqr e PRS_VV_iqr)
// utilizamos dados do sentinel 1 (COPERNICUS/S1_GRD) (instrument mode: IW, orbita DESCENDENTE))
// do sentinel 2: 
//o DeM é o produto Copernicus, baseado na missão TanDEM-X (https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_DEM_GLO30#description)

var dem = DEM_export.reproject({crs: 'EPSG:32719',scale: 30}).select('dem');
var slope = DEM_export.reproject({crs: 'EPSG:32719',scale: 30}).select('slope');
var mergedCollection = S2_composite.addBands(PRS_VV_iqr.addBands(PRS_VH_iqr.addBands(dem.addBands(slope.addBands(forest_mask)))));

// cortar para o limite (fizemos para Coari inteira)
var clippedmergedCollection = mergedCollection.clipToCollection(limite);
print('clippedmergedCollection: ', clippedmergedCollection);


// Bandas que serão analisadas na classificação (atentar para banda que vem da máscara de floresta)
var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B11', 'B12', 'VV_iqr', 'VH_iqr', 'dem', 'slope', 'Map'];
//também seria possível fazer com as bandas dos índices de vegetação, bastava calcular no preparo estes índices para a imagem sentinel
//var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B11', 'B12', 'ndvi', 'mndwi', 'ndbi', 'evi', 'bsi', 'VV_iqr', 'VH_iqr', 'dem', 'slope', 'Map'];

// função para fazer máscara onde a declividade for maior que 30%
var slopeMask = function(image) {
  return image.updateMask(slope.lt(30));
};
//função para fazer máscara onde o erro medido for maior que 50% para o dado do GEDI
var errorMask = function(image) {
  var relative_se = image.select('SE')
    .divide(image.select('MU'));
  return image.updateMask(relative_se.lte(0.05));
};

////////////////////
// Dataset para treinamento
// para mais informações, ver https://developers.google.com/earth-engine/datasets/catalog/LARSE_GEDI_GEDI04_B_002

var l4b = ee.Image('LARSE/GEDI/GEDI04_B_002');

//aplicando as máscaras baseadas nas funções anteriores
var dataset2 = slopeMask(l4b);
var dataset = errorMask(dataset2);

//inserir somente a banda MU, que corresponde a densidade média da biomassa (ton/ha)
var gedi = dataset.select('MU').clip(limite);
Map.centerObject(limitemenor, 12);

// Reprojetar                 
var dataset = gedi.reproject({crs: 'EPSG:32719', scale: 100});


// Mostrar o dado GEDI L4B
Map.addLayer(dataset,
    {min: 0, max: 310, palette: '440154,414387,2a788e,23a884,7ad151,fde725'},
    'Biomassa média');


// Amostrar pontos por sobre o dado gedi 
var points = dataset.sample({
   region: limite,
   scale: 100,
   numPixels: 1000, 
   geometries: true});

// Printar e mostrar esses pontos derivados do GEDI L4B
print(points.size());
print(points.limit(10)); //só os dez primeiros

Map.addLayer(points, [], 'pontos amostrais derivados do GEDI L4B');

// Separar dados de treinamento e dados de validação 
// Adicionar uma coluna chamada random e especificar um valor seed para repetibilidade
var datawithColumn = points.randomColumn('random', 27);

// Usamos 75% para treinamento, 25% para validação
var split = 0.75; 
var trainingData = datawithColumn.filter(ee.Filter.lt('random', split));
print('training data', trainingData);

var validationData = datawithColumn.filter(ee.Filter.gte('random', split));
print('validation data', validationData);

////////////////////
// Regressão a partir do algoritmo classificador random forest

// coletando dados de treinamento
var training = clippedmergedCollection.select(bands).sampleRegions({
  collection: trainingData,
  properties: ['MU'],
  scale: 100 // Aumentar caso dê problema de out of memory
  });

// Fazendo o treinamento do classificador com 50 árvores
var classifier = ee.Classifier.smileRandomForest (50)
  .setOutputMode('REGRESSION')
  .train({
    features: training, 
    classProperty: "MU",
    inputProperties: bands
    });

//aplicar o modelo
var regression = clippedmergedCollection.
  select(bands).
  classify(classifier, 'predicted').
  clip(limite);

//exportando o resultado da regressão
var exportPath ='juliana_gedi/'


Export.image.toAsset({
  image: regression.clip(limite),
  description: 'Regressao_metodo1',
  assetId: exportPath + 'regressaometodo1',
  region: limite,
  scale: 100,
  maxPixels: 1e10
});

Export.table.toAsset({
  collection: trainingData,
  description: 'treinamento'
})

Export.table.toAsset({
  collection: validationData,
  description: 'validacao'
})

//////////////////////////
// Check model performance
// Get details of classifier
var classifier_details = classifier.explain();

// Explain the classifier with importance values
var variable_importance = ee.Feature(null, ee.Dictionary(classifier_details).get('importance'));

var chart =
  ui.Chart.feature.byProperty(variable_importance)
  .setChartType('ColumnChart')
  .setOptions({
  title: 'Random Forest Variable Importance',
  legend: {position: 'none'},
  hAxis: {title: 'Bands'},
  vAxis: {title: 'Importance'}
});

// Plot a chart
print("Variable importance:", chart);
